{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home xmrSale is a simple, easily deployable, lightweight Monero payment processor that connects to your own Monero node. A Monero specialized fork of SatSale Please support via the Monero Community Crowdfunding System . try.xmrsale.org Or check out our Monero webstore demo: store.xmrsale.org xmrSale is currently under early development, always manually check significant payments . try.xmrsale.org xmrSale is a self-hosted Monero payment processor, serving two primary use cases: 1. Donation button for your website that you can easily embed/link to anywhere. 2. Monero payment gateway, including a Woocommerce plugin that easily turns ANY Wordpress site into a Monero accepting store. xmrSale makes donation buttons simple - easy copy paste the one line HTML iframe into your site. With a simple Python backend to talk to your own Monero node, xmrSale uses RPC to generate new addresses, and monitors the payment status with your own copy of the blockchain. Features You don't need your own node, xmrSale sets up monero-wallet-rpc and connects to public nodes (can be over tor!) Lightweight and highly extendable, basic html and css stying. Modular Python backend, take a look at the code . Natively extendable to all Monerod node features (e.g. segwit) through RPC. QR codes, customizable required payment confirmations and payment expiry time. Privacy ensured. Monero only. Contributions See the Github . Pull requests welcome. Disclaimer xmrSale is in very early development. As such, we are not responsible for any loss of funds, vulnerabilities with software, or any other grievances which may arise. Always confirm large payments manually. Support Thank you for your continued support on the Monero Community Crowdfunding System (CCS). You can also support the satSale project as we relied on it heavily as a code base.","title":"Home"},{"location":"#home","text":"xmrSale is a simple, easily deployable, lightweight Monero payment processor that connects to your own Monero node. A Monero specialized fork of SatSale Please support via the Monero Community Crowdfunding System .","title":"Home"},{"location":"#tryxmrsaleorg","text":"Or check out our Monero webstore demo: store.xmrsale.org xmrSale is currently under early development, always manually check significant payments .","title":"try.xmrsale.org"},{"location":"#tryxmrsaleorg_1","text":"xmrSale is a self-hosted Monero payment processor, serving two primary use cases: 1. Donation button for your website that you can easily embed/link to anywhere. 2. Monero payment gateway, including a Woocommerce plugin that easily turns ANY Wordpress site into a Monero accepting store. xmrSale makes donation buttons simple - easy copy paste the one line HTML iframe into your site. With a simple Python backend to talk to your own Monero node, xmrSale uses RPC to generate new addresses, and monitors the payment status with your own copy of the blockchain.","title":"try.xmrsale.org"},{"location":"#features","text":"You don't need your own node, xmrSale sets up monero-wallet-rpc and connects to public nodes (can be over tor!) Lightweight and highly extendable, basic html and css stying. Modular Python backend, take a look at the code . Natively extendable to all Monerod node features (e.g. segwit) through RPC. QR codes, customizable required payment confirmations and payment expiry time. Privacy ensured. Monero only.","title":"Features"},{"location":"#contributions","text":"See the Github . Pull requests welcome.","title":"Contributions"},{"location":"#disclaimer","text":"xmrSale is in very early development. As such, we are not responsible for any loss of funds, vulnerabilities with software, or any other grievances which may arise. Always confirm large payments manually.","title":"Disclaimer"},{"location":"#support","text":"Thank you for your continued support on the Monero Community Crowdfunding System (CCS). You can also support the satSale project as we relied on it heavily as a code base.","title":"Support"},{"location":"HTTPS/","text":"Domains and HTTPS with NGINX & certbot Embedded iframes are easy if your site only uses HTTP. But if your site uses HTTPS, then you can likely see your donation button at http://YOUR_SERVER_IP:8000/ but not in the embeded iframe due to HTTPS security policies. It is best that we create a new subdomain like xmrsale.yoursite.com from which we can serve payments. Install NGINX, and create a new file /etc/nginx/sites-enabled/xmrsale : server { listen 80; server_name xmrsale.YOURWEBSITE.com; location / { proxy_pass http://localhost:8000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; } } Check with nginx -t and then systemctl restart nginx . Now point your domain xmrsale.YOURWEBSITE.com DNS to your server IP. Then create HTTPS certificates by runnining the certbot command (or whatever else you use). You could also try provide Gunicorn with your website's HTTPS certificate directly by using the flags --certfile=cert.pem --keyfile=key.key . If you use certbot for SSL, your keys are probably in /etc/letsencrypt/live/ .","title":"Domains and HTTPS with NGINX & certbot"},{"location":"HTTPS/#domains-and-https-with-nginx-certbot","text":"Embedded iframes are easy if your site only uses HTTP. But if your site uses HTTPS, then you can likely see your donation button at http://YOUR_SERVER_IP:8000/ but not in the embeded iframe due to HTTPS security policies. It is best that we create a new subdomain like xmrsale.yoursite.com from which we can serve payments. Install NGINX, and create a new file /etc/nginx/sites-enabled/xmrsale : server { listen 80; server_name xmrsale.YOURWEBSITE.com; location / { proxy_pass http://localhost:8000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $host; } } Check with nginx -t and then systemctl restart nginx . Now point your domain xmrsale.YOURWEBSITE.com DNS to your server IP. Then create HTTPS certificates by runnining the certbot command (or whatever else you use). You could also try provide Gunicorn with your website's HTTPS certificate directly by using the flags --certfile=cert.pem --keyfile=key.key . If you use certbot for SSL, your keys are probably in /etc/letsencrypt/live/ .","title":"Domains and HTTPS with NGINX &amp; certbot"},{"location":"install/","text":"Installation If you want to run on your own node or docker, please checkout this original branch . First, clone and install dependencies git clone https://github.com/xmrsale/xmrSale cd xmrSale/ pip3 install -r requirements.txt xmrSale Setup Run python3 xmrsale.py --setup This will download monero-cli tools from downloads.getmonero.org which are used to manage payments. Enter a new password for your new xmrsale_wallet (and .keys ). You must backup your passphrase and seedphrase . Click N when asked whether you want to mine in the background, then type exit . Now xmrsale will run the monero-wallet-rpc and sync with a public node ( node.moneroworld.com ). Once you see Refresh done, blocks received... you are ready to run xmrsale! If you want, you can adjust the config.py to your liking. You can always sync with python3 xmrsale.py --sync . Start xmrSale Run xmrSale with gunicorn xmrsale:app --timeout 120 That's it! If running locally, this will be 127.0.0.1:8000 . If you allow traffic on that port you should now also be able to view your xmrSale at http://YOUR_IP:8000/ . If you're running on a VPS you may need to ufw allow 8000 or make an nginx config . You will want to run gunicorn with nohup so it continues serving in the background: nohup gunicorn xmrsale:app > log.txt 2>&1 & tail -f log.txt Embed a Donation Button Now we have xmrSale running, let's embed the donation button into a website HTML: <iframe src=\"http://YOUR_SERVER_IP:8000/\" style=\"margin: 0 auto;display:block;width:420px;height:460px;border:none;overflow:hidden;\" scrolling=\"no\"></iframe> Change YOUR_SERVER_IP to the IP address of the machine you're running xmrSale on, node or otherwise. Additionally, you could redirect a domain to that IP and use that instead.","title":"Installation"},{"location":"install/#installation","text":"If you want to run on your own node or docker, please checkout this original branch . First, clone and install dependencies git clone https://github.com/xmrsale/xmrSale cd xmrSale/ pip3 install -r requirements.txt","title":"Installation"},{"location":"install/#xmrsale-setup","text":"Run python3 xmrsale.py --setup This will download monero-cli tools from downloads.getmonero.org which are used to manage payments. Enter a new password for your new xmrsale_wallet (and .keys ). You must backup your passphrase and seedphrase . Click N when asked whether you want to mine in the background, then type exit . Now xmrsale will run the monero-wallet-rpc and sync with a public node ( node.moneroworld.com ). Once you see Refresh done, blocks received... you are ready to run xmrsale! If you want, you can adjust the config.py to your liking. You can always sync with python3 xmrsale.py --sync .","title":"xmrSale Setup"},{"location":"install/#start-xmrsale","text":"Run xmrSale with gunicorn xmrsale:app --timeout 120 That's it! If running locally, this will be 127.0.0.1:8000 . If you allow traffic on that port you should now also be able to view your xmrSale at http://YOUR_IP:8000/ . If you're running on a VPS you may need to ufw allow 8000 or make an nginx config . You will want to run gunicorn with nohup so it continues serving in the background: nohup gunicorn xmrsale:app > log.txt 2>&1 & tail -f log.txt","title":"Start xmrSale"},{"location":"install/#embed-a-donation-button","text":"Now we have xmrSale running, let's embed the donation button into a website HTML: <iframe src=\"http://YOUR_SERVER_IP:8000/\" style=\"margin: 0 auto;display:block;width:420px;height:460px;border:none;overflow:hidden;\" scrolling=\"no\"></iframe> Change YOUR_SERVER_IP to the IP address of the machine you're running xmrSale on, node or otherwise. Additionally, you could redirect a domain to that IP and use that instead.","title":"Embed a Donation Button"},{"location":"tor/","text":"Tor First ensure that you have installed torsocks ( sudo apt install tor ) and have tor running in the background. You can now enable tor=True in the config to connect to remote public nodes over tor. xmrSale over tor Currently you can use Tor in two ways 1) Connect xmrSale to your Monero node over a tor hidden service (if you're connecting to a remote node, may be preferable to SSH tunneling). 2) Host xmrSale as a Tor onion site Monero Node RPC Hidden Service On your Monero node install tor and in /etc/tor/torrc : HiddenServiceDir /var/lib/tor/node_rpc/ HiddenServicePort NODE_RPC_PORT 127.0.0.1:NODE_RPC_PORT HiddenServiceDir /var/lib/tor/wallet_rpc/ HiddenServicePort WALLET_RPC_PORT 127.0.0.1:WALLET_RPC_PORT with the appropriate NODE_RPC_PORT () and WALLET_RPC_PORT () then sudo systemctl restart tor cat /var/lib/tor/node_rpc/hostname to get the onion URL for your tor hidden service. Add this in config.py like tor_bitcoinrpc_host = \"http://u7...bid.onion\" On your xmrSale machine, install tor and in /etc/tor/torrc (thanks @x_y:matrix.org): SocksPort 127.0.0.1:9050 IsolateClientProtocol IsolateDestPort IsolateDestAddr ExtendedErrors IPv6Traffic PreferIPv6 KeepAliveIsolateSOCKSAuth SocksPolicy accept 127.0.0.1 SocksPolicy reject * Now start the tor proxy on your xmrSale machine with sudo tor and xmrSale is now configured to connect to your node at localhost over tor. xmrSale Tor .Onion It's possible to run xmrSale on an onion site. However, currently this will only work in some Tor browsers, and likely not in the official Tor Browser unless you fully enable javascript which is a bad idea. This is something we would like to change in the future. On your xmrSale machine, install tor and in /etc/tor/torrc : HiddenServiceDir /var/lib/tor/xmrsale/ HiddenServiceVersion 3 HiddenServicePort 80 127.0.0.1:8000 then sudo systemctl restart tor cat /var/lib/tor/xmrsale/hostname to get your onion URL. Go visit!","title":"Tor"},{"location":"tor/#tor","text":"First ensure that you have installed torsocks ( sudo apt install tor ) and have tor running in the background. You can now enable tor=True in the config to connect to remote public nodes over tor.","title":"Tor"},{"location":"tor/#xmrsale-over-tor","text":"Currently you can use Tor in two ways 1) Connect xmrSale to your Monero node over a tor hidden service (if you're connecting to a remote node, may be preferable to SSH tunneling). 2) Host xmrSale as a Tor onion site","title":"xmrSale over tor"},{"location":"tor/#monero-node-rpc-hidden-service","text":"On your Monero node install tor and in /etc/tor/torrc : HiddenServiceDir /var/lib/tor/node_rpc/ HiddenServicePort NODE_RPC_PORT 127.0.0.1:NODE_RPC_PORT HiddenServiceDir /var/lib/tor/wallet_rpc/ HiddenServicePort WALLET_RPC_PORT 127.0.0.1:WALLET_RPC_PORT with the appropriate NODE_RPC_PORT () and WALLET_RPC_PORT () then sudo systemctl restart tor cat /var/lib/tor/node_rpc/hostname to get the onion URL for your tor hidden service. Add this in config.py like tor_bitcoinrpc_host = \"http://u7...bid.onion\" On your xmrSale machine, install tor and in /etc/tor/torrc (thanks @x_y:matrix.org): SocksPort 127.0.0.1:9050 IsolateClientProtocol IsolateDestPort IsolateDestAddr ExtendedErrors IPv6Traffic PreferIPv6 KeepAliveIsolateSOCKSAuth SocksPolicy accept 127.0.0.1 SocksPolicy reject * Now start the tor proxy on your xmrSale machine with sudo tor and xmrSale is now configured to connect to your node at localhost over tor.","title":"Monero Node RPC Hidden Service"},{"location":"tor/#xmrsale-tor-onion","text":"It's possible to run xmrSale on an onion site. However, currently this will only work in some Tor browsers, and likely not in the official Tor Browser unless you fully enable javascript which is a bad idea. This is something we would like to change in the future. On your xmrSale machine, install tor and in /etc/tor/torrc : HiddenServiceDir /var/lib/tor/xmrsale/ HiddenServiceVersion 3 HiddenServicePort 80 127.0.0.1:8000 then sudo systemctl restart tor cat /var/lib/tor/xmrsale/hostname to get your onion URL. Go visit!","title":"xmrSale Tor .Onion"},{"location":"version1_install/","text":"Installation xmrSale needs a Monero node to check the Monero blockchain for payments. If you don't have a node, you can follow the Docker installation below which will install one for you. Or you can install one yourself. While you can run xmrSale on the same machine as your Monero node, a separate VPS for xmrSale is recommended. Install (with node) Clone and install dependencies git clone https://github.com/xmrsale/xmrSale cd xmrSale/ pip3 install -r requirements.txt Connect to your Monero Node Edit the config.py configuration and point to your Monero node: host = \"127.0.0.1\" monerod_rpcport = \"18081\" monerowallet_rpcport = \"18090\" monerod_username = \"MONERODRPC_USER\" monerod_password = \"MONERODRPC_PASS\" wallet_username = \"WALLETRPC_USER\" wallet_password = \"WALLETRPC_PASS\" You can find these monerod rpc details in monero.conf or in daemon arguments within your systemd .service . To be able to connect to your node with full ability to create addresses, we need to have a monero wallet RPC service running alongside our monerod RPC. Note most node guides do not install this by default, including sethforprivacy's. An example command for monero-wallet-rpc is: monero-wallet-rpc --rpc-bind-ip 0.0.0.0 --rpc-bind-port 18090 --confirm-external-bind --rpc-login monerorpc:RPCPASSWORD --daemon-login monerorpc:RPCPASSWORD --daemon-port 18081 --wallet-file /etc/monero/WALLETKEYS.keys --password \"WALLETPASSWORD\" --pidfile /var/run/monero/monerowallet.pid --log-file /var/log/monero/monero-rpc.log --detach However it is probably easiest to run this as a service like you may have done for your monerod daemon. We will just create a similar .service , here is an example monerowallet.service . You can set the wallet RPC login as arguments in this file. If you are connecting to a remote node, this is easy via SSH tunneling or tor hidden services (see Tor page), you can open these tunnels with ssh root@IP -q -N -L 18081:localhost:18081 & ssh root@IP -q -N -L 18090:localhost:18090 & or whatever ports you're using. Make sure your ssh connection is working (without any ssh-key prompts! No passwords!). Further config examples can be found in docs/ . Run xmrSale Finally, run xmrSale with gunicorn -w 1 -b 0.0.0.0:8000 xmrsale:app Gunicorn is a lightweight python HTTP server, alternatively you can run with just python xmrsale.py though this is not recommended for production. You should now be able to view your xmrSale server at http://YOUR_SERVER_IP:8000/ . If running locally, this will be 127.0.0.1:8000 . To serve constantly in the background, run gunicorn with nohup: nohup gunicorn -w 1 0.0.0.0:8000 xmrsale:app > log.txt 2>&1 & tail -f log.txt You can then kill xmrsale with pkill gunicorn . If running on a machine at home, you may want to forward port 8000 in your router settings so that xmrSale is also visible to the public on your external IP address. You may also need to allow gunicorn through your firewall with sudo ufw allow 8000 . Install (with Docker) A beta docker image is only semi working and has not yet been security vetted and is not ready for production use, it is packaged with a Monero node for an easy installation: For testing: git clone https://github.com/xmrsale/xmrSale cd xmrSale/ Edit docker-compose.yml with links to your Monero wallet file and blockchain directory (if applicable). Then docker-compose up --build it will have to sync with the Monero blockchain which may take some time. Embed a Donation Button Now we have xmrSale running, let's embed the donation button into a website HTML: <iframe src=\"http://YOUR_SERVER_IP:8000/\" style=\"margin: 0 auto;display:block;width:420px;height:460px;border:none;overflow:hidden;\" scrolling=\"no\"></iframe> Change YOUR_SERVER_IP to the IP address of the machine you're running xmrSale on, node or otherwise. Additionally, you could redirect a domain to that IP and use that instead.","title":"Installation"},{"location":"version1_install/#installation","text":"xmrSale needs a Monero node to check the Monero blockchain for payments. If you don't have a node, you can follow the Docker installation below which will install one for you. Or you can install one yourself. While you can run xmrSale on the same machine as your Monero node, a separate VPS for xmrSale is recommended.","title":"Installation"},{"location":"version1_install/#install-with-node","text":"Clone and install dependencies git clone https://github.com/xmrsale/xmrSale cd xmrSale/ pip3 install -r requirements.txt","title":"Install (with node)"},{"location":"version1_install/#connect-to-your-monero-node","text":"Edit the config.py configuration and point to your Monero node: host = \"127.0.0.1\" monerod_rpcport = \"18081\" monerowallet_rpcport = \"18090\" monerod_username = \"MONERODRPC_USER\" monerod_password = \"MONERODRPC_PASS\" wallet_username = \"WALLETRPC_USER\" wallet_password = \"WALLETRPC_PASS\" You can find these monerod rpc details in monero.conf or in daemon arguments within your systemd .service . To be able to connect to your node with full ability to create addresses, we need to have a monero wallet RPC service running alongside our monerod RPC. Note most node guides do not install this by default, including sethforprivacy's. An example command for monero-wallet-rpc is: monero-wallet-rpc --rpc-bind-ip 0.0.0.0 --rpc-bind-port 18090 --confirm-external-bind --rpc-login monerorpc:RPCPASSWORD --daemon-login monerorpc:RPCPASSWORD --daemon-port 18081 --wallet-file /etc/monero/WALLETKEYS.keys --password \"WALLETPASSWORD\" --pidfile /var/run/monero/monerowallet.pid --log-file /var/log/monero/monero-rpc.log --detach However it is probably easiest to run this as a service like you may have done for your monerod daemon. We will just create a similar .service , here is an example monerowallet.service . You can set the wallet RPC login as arguments in this file. If you are connecting to a remote node, this is easy via SSH tunneling or tor hidden services (see Tor page), you can open these tunnels with ssh root@IP -q -N -L 18081:localhost:18081 & ssh root@IP -q -N -L 18090:localhost:18090 & or whatever ports you're using. Make sure your ssh connection is working (without any ssh-key prompts! No passwords!). Further config examples can be found in docs/ .","title":"Connect to your Monero Node"},{"location":"version1_install/#run-xmrsale","text":"Finally, run xmrSale with gunicorn -w 1 -b 0.0.0.0:8000 xmrsale:app Gunicorn is a lightweight python HTTP server, alternatively you can run with just python xmrsale.py though this is not recommended for production. You should now be able to view your xmrSale server at http://YOUR_SERVER_IP:8000/ . If running locally, this will be 127.0.0.1:8000 . To serve constantly in the background, run gunicorn with nohup: nohup gunicorn -w 1 0.0.0.0:8000 xmrsale:app > log.txt 2>&1 & tail -f log.txt You can then kill xmrsale with pkill gunicorn . If running on a machine at home, you may want to forward port 8000 in your router settings so that xmrSale is also visible to the public on your external IP address. You may also need to allow gunicorn through your firewall with sudo ufw allow 8000 .","title":"Run xmrSale"},{"location":"version1_install/#install-with-docker","text":"A beta docker image is only semi working and has not yet been security vetted and is not ready for production use, it is packaged with a Monero node for an easy installation: For testing: git clone https://github.com/xmrsale/xmrSale cd xmrSale/ Edit docker-compose.yml with links to your Monero wallet file and blockchain directory (if applicable). Then docker-compose up --build it will have to sync with the Monero blockchain which may take some time.","title":"Install (with Docker)"},{"location":"version1_install/#embed-a-donation-button","text":"Now we have xmrSale running, let's embed the donation button into a website HTML: <iframe src=\"http://YOUR_SERVER_IP:8000/\" style=\"margin: 0 auto;display:block;width:420px;height:460px;border:none;overflow:hidden;\" scrolling=\"no\"></iframe> Change YOUR_SERVER_IP to the IP address of the machine you're running xmrSale on, node or otherwise. Additionally, you could redirect a domain to that IP and use that instead.","title":"Embed a Donation Button"},{"location":"woocommerce/","text":"Woocommerce Payment Gateway To install the woocommerce payment gateway plugin, first copy /gateways/woo_xmrsale.php to your Wordpress site in wp-content/plugins/ . Next, in your Wordpress admin area, go to the plugins section and activate xmrSale. Then go to the Woocommerce settings and the \"Payments\" tab. Enable xmrSale as a payment gateway. Click 'Set Up'/'Manage' and fill out the required fields and point towards your xmrSale instance. You will need to copy the contents of xmrSale/xmrSale_API_key into your API key field. This is generated after running xmrSale for the first time. Now you should be able to view xmrSale as an option in your checkout: That's it! Please reach out if there are some further features you desire in this plugin.","title":"Woocommerce Payment Gateway"},{"location":"woocommerce/#woocommerce-payment-gateway","text":"To install the woocommerce payment gateway plugin, first copy /gateways/woo_xmrsale.php to your Wordpress site in wp-content/plugins/ . Next, in your Wordpress admin area, go to the plugins section and activate xmrSale. Then go to the Woocommerce settings and the \"Payments\" tab. Enable xmrSale as a payment gateway. Click 'Set Up'/'Manage' and fill out the required fields and point towards your xmrSale instance. You will need to copy the contents of xmrSale/xmrSale_API_key into your API key field. This is generated after running xmrSale for the first time. Now you should be able to view xmrSale as an option in your checkout: That's it! Please reach out if there are some further features you desire in this plugin.","title":"Woocommerce Payment Gateway"}]}